{"version":3,"sources":["ColorModeSwitcher.js","DataTable.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","DataTable","data","columns","useTable","useSortBy","headerGroups","rows","prepareRow","width","placement","mb","href","isExternal","textAlign","map","headerGroup","headers","column","render","row","cells","cell","App","Header","accessor","Cell","e","value","theme","minH","p","justifySelf","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.831c370f.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import * as React from \"react\";\r\nimport {\r\n    Table,\r\n    Thead,\r\n    Tbody,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    Link,\r\n    TableCaption,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\n\r\nexport function DataTable({\r\n    data,\r\n    columns\r\n}) {\r\n    const {\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data }, useSortBy);\r\n\r\n    return (\r\n        <Table variant=\"simple\" width=\"90%\" >\r\n            <TableCaption placement=\"top\" fontSize=\"2xl\" mb=\"4\">Particularly Great Reads from <Link color=\"teal.500\" href=\"https://patrickcollison.com/bookshelf\" isExternal> Patrick Collison's Bookshelf</Link> </TableCaption>\r\n            <Thead textAlign=\"center\">\r\n\r\n                {headerGroups.map((headerGroup) => (\r\n\r\n                    <Tr textAlign=\"center\">\r\n                        {/* <Center> */}\r\n                        {headerGroup.headers.map((column) => (\r\n                            <Th\r\n                                textAlign=\"center\"\r\n                            >\r\n                                {column.render(\"Header\")}\r\n\r\n                            </Th>\r\n                        ))}\r\n                        {/* </Center> */}\r\n                    </Tr>\r\n\r\n                ))}\r\n\r\n            </Thead>\r\n            <Tbody>\r\n                {rows.map((row) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <Tr >\r\n                            {row.cells.map((cell) => (\r\n                                <Td\r\n                                    textAlign=\"center\"\r\n                                >\r\n                                    {/* <Link href={cell.render(\"Cell\")} isExternal> */}\r\n                                    {cell.render(\"Cell\")}\r\n                                    {/* </Link> */}\r\n                                </Td>\r\n                            ))}\r\n                        </Tr>\r\n                    );\r\n                })}\r\n            </Tbody>\r\n        </Table>\r\n    );\r\n}\r\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  Grid,\n  theme,\n  Link,\n  Center\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { DataTable } from \"./DataTable\";\n\nfunction App() {\n\n  const columns = [\n    {\n      Header: \"Title\",\n      accessor: \"Title\"\n    },\n    {\n      Header: \"Amazon Link\",\n      accessor: \"Link\",\n      Cell: e => <Link href={e.value} color=\"teal.500\" isExternal> {e.value} </Link>\n\n    },\n  ];\n\n  const data = [\n    {\n      \"Title\": \"The Rise and Fall of American Growth\",\n      \"Link\": \"http://amazon.com/dp/0691147728\"\n    },\n    {\n      \"Title\": \"Mind-Body Problem\",\n      \"Link\": \"http://amazon.com/dp/0233977279\"\n    },\n    {\n      \"Title\": \"Poor Charlie's Almanack\",\n      \"Link\": \"http://amazon.com/dp/157864366X\"\n    },\n    {\n      \"Title\": \"Something Incredibly Wonderful Happens\",\n      \"Link\": \"http://amazon.com/dp/0151008221\"\n    },\n    {\n      \"Title\": \"Hard Landing\",\n      \"Link\": \"http://amazon.com/dp/0812928350\"\n    },\n    {\n      \"Title\": \"Nixon Agonistes\",\n      \"Link\": \"http://amazon.com/dp/0618134328\"\n    },\n    {\n      \"Title\": \"The Dream Machine\",\n      \"Link\": \"http://amazon.com/dp/0670899763\"\n    },\n    {\n      \"Title\": \"Age of Ambition\",\n      \"Link\": \"http://amazon.com/dp/0374280746\"\n    },\n    {\n      \"Title\": \"If the Universe Is Teeming with Aliens ... WHERE IS EVERYBODY?\",\n      \"Link\": \"http://amazon.com/dp/0387955011\"\n    },\n    {\n      \"Title\": \"The Beginning of Infinity\",\n      \"Link\": \"http://amazon.com/dp/0670022756\"\n    },\n    {\n      \"Title\": \"The Paris Review Interviews, I\",\n      \"Link\": \"http://amazon.com/dp/0312361750\"\n    },\n    {\n      \"Title\": \"Mindstorms\",\n      \"Link\": \"http://amazon.com/dp/0465046274\"\n    },\n    {\n      \"Title\": \"Out of Mao's Shadow\",\n      \"Link\": \"http://amazon.com/dp/B00HUC71A8\"\n    },\n    {\n      \"Title\": \"Democracy in America\",\n      \"Link\": \"http://www.abebooks.com/9780451628015/Democracy-America-Abridged-Edition-Mentor-0451628012/plp\"\n    },\n    {\n      \"Title\": \"Metamagical Themas\",\n      \"Link\": \"http://amazon.com/dp/0465045669\"\n    },\n    {\n      \"Title\": \"Dancing in the Glory of Monsters\",\n      \"Link\": \"http://amazon.com/dp/B0076M4VDC\"\n    },\n    {\n      \"Title\": \"The Art of Doing Science and Engineering\",\n      \"Link\": \"http://amazon.com/dp/9056995014\"\n    },\n    {\n      \"Title\": \"A Pattern Language\",\n      \"Link\": \"http://amazon.com/dp/0195019199\"\n    },\n    {\n      \"Title\": \"Paradigms of Artificial Intelligence Programming\",\n      \"Link\": \"http://amazon.com/dp/1558601910\"\n    },\n    {\n      \"Title\": \"Anthropic Bias\",\n      \"Link\": \"http://amazon.com/dp/B00FVTSFK2\"\n    }\n\n  ];\n\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Center>\n        <Box textAlign=\"center\" fontSize=\"lg\">\n          <Grid minH=\"100vh\" p={3} >\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n            <VStack spacing={2}>\n              <DataTable columns={columns} data={data} />\n            </VStack>\n          </Grid>\n        </Box>\n      </Center>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}